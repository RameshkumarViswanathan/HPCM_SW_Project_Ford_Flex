#!/usr/bin/env perl
# Description:	Find all make leaves
use 5.010001;
use strict;
use warnings FATAL => 'all';
use autodie;
use Cwd 'abs_path';
use Carp;
use English;
use POSIX;
use Getopt::Long;
use File::Basename;
use File::Find;
use File::Spec;

alarm 10;
my $version = '%version: 10 %';		# Special string updated by synergy
$version =~ s/^.*? | %//g;
our $VERSION = $version;
use FindBin;
push (@INC, $FindBin::RealBin);
require MM_common;

#--- main
my %blacklist;
our $opt_link;
our $opt_root = '.';
my %suffix =		# Supported suffixes
(
	xsm => '.xsm',	# eXtended S-Motorola
	C   => '.c',	# C source
	S   => '.S',	# C preprocessing-Assembly
	s   => '.s',	# Assembly
	o   => '.o',	# Object
	a   => '.a',	# Archive
	dd  => '.dd',	# Data Dictionary
	a2l => '.a2l'	# Asap2
);
Getopt::Long::Configure(qw(require_order no_pass_through no_bundling));
GetOptions(
					# Files to be discarded
	'blacklist|b=s' => sub {$blacklist{$_[1]} = 0},
	'suffix|s=s%{,8}' => \%suffix,	# File suffixes be looked for
	'link|l',			# resolve links
	'root|r=s'			# root path of the search
) or MM_common::help();
$OUTPUT_RECORD_SEPARATOR=$INPUT_RECORD_SEPARATOR;
if (($OSNAME eq 'MSWin32') and (defined $opt_link))
{
	warn "links are unsupported in ms-win$RS";
	$opt_link = undef
}
sub wanted($);
sub print_leaf($);
$opt_root =~ s/^\s+|\s+$//g;	# Trim the name, left internal spaces
$suffix{$_} =~ s/\./\\./g foreach (keys %suffix);
my %find_options =
(
	wanted => \&wanted,
	follow => 1,	# Follow symbolic links
	no_chdir => 1	# Does not chdir() to each directory
);
find(\%find_options, $opt_root);
my %paths;
warn("No sources in '$opt_root'$RS") if scalar(keys %paths) == 0;

#use List::Util 'first';
#--- Checks the finded pathnames
sub wanted($)
{
	my $is_file = -f $_;
	return unless $is_file;
	unless (-r $_)
	{
		warn "in <> not readable file '$_'$RS";
		next
	}
	foreach my $suffix (values %suffix)
	{
		if (m/$suffix$/)	# Only supported suffixes
		{
			print_leaf($_);
			return
		}
	}
}
#--- Prints the wanted pathnames
sub print_leaf($)
{
	my $filename = File::Spec->splitpath($_);
	if (exists $blacklist{$filename})
	{
		my $message = '';
		$message .= "in $MM_common::opt_output "
					if defined $MM_common::opt_output;
		warn("${message}'$_' is blacklisted$RS") if $Carp::Verbose;
		$blacklist{$filename} = 1;
		return
	}
	$_ = File::Spec->abs2rel($_);
	my $canonpath = File::Spec->canonpath($_);
	my $linkedpath = File::Spec->abs2rel(abs_path($_));
	if (defined $paths{$filename})
	{
		die("'$paths{$filename}' duplicate of '$canonpath'$RS");
		return
	}
	warn("'$canonpath' linked to ${linkedpath}$RS")
						if $Carp::Verbose and (-l $_);
	$canonpath=$linkedpath if defined $opt_link;
	$paths{$filename} = $canonpath;
	print $canonpath
}
while (my ($filename, $blacklisted) = each %blacklist)
{
	print("BLACKLISTED $filename") if $blacklisted
}


=head1 NAME

s_list - create the list of sources (leaf)

=head1 SYNOPSIS

s_list [options]

=head1 DESCRIPTION

Find all make leaves, but black_list

=head1 OPTIONS

 -b --black_list <list>	list of files to be discarded
 -s --suffix <k>=<v>	Supported suffixes. Valid kyes and default values are:
	C   => '.c',	(C source)
	S   => '.S',	(C preprocessing-Assembly)
	s   => '.s',	(Assembly)
	o   => '.o',	(Object)
	a   => '.a',	(Archive)
	dd  => '.dd',	(Data Dictionary)
	a2l => '.a2l',	(Asap2)
	xsm => '.xsm'	(eXtended S-Motorola)
 -l --link		resolve symbolik links
 -r --root		root path of the search (default .)

=head1 AUTOR

TechM

=head1 COPYRIGHT


