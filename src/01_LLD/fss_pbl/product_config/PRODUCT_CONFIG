#!/usr/bin/env perl
#  Description:		Update of the product config description file.
use 5.010001;
use strict;
use warnings FATAL => 'all';
use autodie;
use English;
use POSIX;
use Getopt::Long;

alarm 5;
my $version = '%version: cm39bo~13 %';		# Special string updated by synergy
$version =~ s/^.*? | %//g;
our $VERSION = $version;
use FindBin;
push (@INC, $FindBin::RealBin);
require MM_common;

our $opt_compiler;
our $opt_map;
our $opt_rename;
Getopt::Long::Configure(qw(require_order no_pass_through));
GetOptions(
	'compiler|c=s',	# compiler's name
	'map|m=s',	# map file
	'rename|r=s'	# rename symbols to be searched
) or MM_common::help();
die "-c or -m option unspecified$RS" unless
				(defined $opt_compiler) and (defined $opt_map);
my $incomplete;
my $content;
my $file;
my @F;
my %keywords =
(
	DELIB_ROM	=> {name => 'DELIB_ROM'},
	ID_SECTION_START => {name => 'ID_SECTION_START'},
	ID_SECTION_END	=> {name => 'ID_SECTION_END'},
	APPL_CODE_START	=> {name => 'APPL_CODE_START'},
	HE_END_CAL	=> {name => 'HE_END_CAL'},
	START_SAFETY_CODE => {name => 'START_SAFETY_CODE'},
	END_SAFETY_CODE	=> {name => 'END_SAFETY_CODE'},
	START_SAFETY_CAL => {name => 'START_SAFETY_CAL'},
	END_SAFETY_CAL	=> {name => 'END_SAFETY_CAL'},	
	HE_SW_ECU	=> {name => 'HE_SW_ECU'}
);
if (defined $opt_rename)
{
	open($file, '<', $opt_rename);
	$content = do {local $RS; <$file>};
	close($file);
	my @rename = split($RS, $content);
	foreach (@rename)
	{
		@F = split /\s+/;
		die "malformed rename file$RS" if ($#F<0) or ($#F>1);
		die "unknown keyword '$F[0]' in rename file$RS"
						unless defined $keywords{$F[0]};
		$keywords{$F[0]}{name} = $F[$#F];
		$keywords{$F[0]}{defined} = 1
	}
}
	# Values to be updated
my $START_ID;
my $END_ID;
my $APPL_CODE_START;
my $HE_END_CAL;
my $START_SAFETY_CODE;
my $END_SAFETY_CODE;
my $START_SAFETY_CAL;
my $END_SAFETY_CAL;
my $SW_VERSION_STRING_ADDRESS;
# Look for class and symbol addresses on the map file.
open($file, '<', $opt_map);
$content = do {local $RS; <$file>};
close($file);
my @map = split($RS, $content);
foreach (@map)
{
	@F = split(' ');
	if ($opt_compiler eq 'c166')
	{			# substr will remove trailing 'h'
		if ((m/\b$keywords{DELIB_ROM}{name}\b/) and (!defined $START_ID))
		{
			$START_ID = substr($F[2], 0, -1);
			$END_ID = substr($F[3], 0, -1)
		}
		if (m/\b$keywords{ID_SECTION_START}{name}\b/)
		{
			$START_ID //= substr($F[2], 0, -1)
		}
		if (m/\b$keywords{ID_SECTION_END}{name}\b/)
		{
			$END_ID //= substr($F[3], 0, -1)
		}
		if (m/\b$keywords{APPL_CODE_START}{name}\b/)
		{
			$APPL_CODE_START //= substr($F[2], 0, -1)
		}
		if (m/\b$keywords{HE_END_CAL}{name}\b/)
		{
			$HE_END_CAL //= substr($F[3], 0, -1)
		}
		if (m/\b$keywords{START_SAFETY_CODE}{name}\b/)
		{
			$START_SAFETY_CODE //= substr($F[2], 0, -1)
		}
		if (m/\b$keywords{END_SAFETY_CODE}{name}\b/)
		{
			$END_SAFETY_CODE //= substr($F[3], 0, -1)
		}
		if (m/\b$keywords{START_SAFETY_CAL}{name}\b/)
		{
			$START_SAFETY_CAL //= substr($F[2], 0, -1)
		}
		if (m/\b$keywords{END_SAFETY_CAL}{name}\b/)
		{
			$END_SAFETY_CAL //= substr($F[3], 0, -1)
		}
		if (m/\b$keywords{HE_SW_ECU}{name}\b/)
		{
			$SW_VERSION_STRING_ADDRESS //= substr($F[2], 0, -1)
		}
	}
	elsif ($opt_compiler eq 'dcc')
	{
		if ((m/\b$keywords{DELIB_ROM}{name}\b/) and (!defined $END_ID))
		{
			$START_ID = uc($F[1]);
			$END_ID = hex($START_ID)+hex($F[2]);
			$END_ID = sprintf("%X", $END_ID)
		}
		if (m/\b$keywords{ID_SECTION_START}{name}\b/)
		{
			$START_ID //= uc($F[1])
		}
		if (m/\b$keywords{ID_SECTION_END}{name}\b/)
		{
			$END_ID //= uc($F[1])
		}
		if (m/\b$keywords{APPL_CODE_START}{name}\b/)
		{
			$APPL_CODE_START //= uc($F[1])
		}
		if ((m/\b$keywords{HE_END_CAL}{name}\b/) and (!defined $HE_END_CAL))
		{
			$HE_END_CAL = hex($F[1])+hex($F[2]);
			$HE_END_CAL = sprintf("%X", $HE_END_CAL)
		}
		if (m/\b$keywords{START_SAFETY_CODE}{name}\b/)
		{
			$START_SAFETY_CODE //= uc($F[1])
		}
		if (m/\b$keywords{END_SAFETY_CODE}{name}\b/)
		{
			$END_SAFETY_CODE //= uc($F[1])
 		}
		if (m/\b$keywords{START_SAFETY_CAL}{name}\b/)
		{
			$START_SAFETY_CAL //= uc($F[1])
		}
		if (m/\b$keywords{END_SAFETY_CAL}{name}\b/)
		{
			$END_SAFETY_CAL //= uc($F[1])
		}
		if (m/\b$keywords{HE_SW_ECU}{name}\b/)
		{
			$SW_VERSION_STRING_ADDRESS //= uc($F[1])
		}
	}
	elsif (($opt_compiler eq 'arm-elf-gcc')
					or ($opt_compiler eq 'ppc-vle-gcc')
					or ($opt_compiler eq 'tricore-gcc'))
	{
		if ((m/\b$keywords{DELIB_ROM}{name}\b/) and (!defined $START_ID))
		{
			$START_ID = uc(substr($F[1], 2));
			$END_ID = hex($START_ID)+oct($F[2]);
			$END_ID = sprintf("%X", $END_ID)
		}
		if (m/\b$keywords{ID_SECTION_START}{name}\b/)
		{
			$START_ID //= uc(substr($F[0], 2))
		}
		if (m/\b$keywords{ID_SECTION_END}{name}\b/)
		{
			$END_ID //= uc(substr($F[0], 2))
		}
		if (m/\b$keywords{APPL_CODE_START}{name}$/)
		{
			$APPL_CODE_START //= uc(substr($F[0], 2))
		}
		if (m/\b$keywords{HE_END_CAL}{name}$/)
		{
			$HE_END_CAL //= uc(substr($F[0], 2))
		}
		if ((m/\b$keywords{START_SAFETY_CODE}{name}\b/) and
						(!defined $START_SAFETY_CODE))
		{
			$START_SAFETY_CODE = uc(substr($F[0], 2));
			my $size = $F[2];
			if ($size =~ /^0(?:x[\dA-F]+)$/i)
			{
				$END_SAFETY_CODE = hex($START_SAFETY_CODE) +
								oct($size);
				$END_SAFETY_CODE = sprintf("%X",
							$END_SAFETY_CODE)
			}
 		}
		if ((m/\b$keywords{END_SAFETY_CODE}{name}\b/) and (!defined $END_SAFETY_CODE))
		{
 			$END_SAFETY_CODE //= uc(substr($F[0], 2))
		}
		if ((m/\b$keywords{START_SAFETY_CAL}{name}\b/) and (!defined $START_SAFETY_CAL))
		{
 			$START_SAFETY_CAL//= uc(substr($F[1], 2))
		}
		if ((m/\b$keywords{END_SAFETY_CAL}{name}\b/) and (!defined $END_SAFETY_CAL))
		{
			$END_SAFETY_CAL//= uc(substr($F[1], 2))
		}
		if (m/\b$keywords{HE_SW_ECU}$/)
		{
			$SW_VERSION_STRING_ADDRESS //= uc(substr($F[0], 2))
		}
	}
	else
	{
		die "unsupported compiler '$opt_compiler'$RS"
	}
}
warn "START_ID undefined$RS" if !defined $START_ID and
				(defined $keywords{DELIB_ROM}{defined} or
				defined $keywords{ID_SECTION_START}{defined});
warn "END_ID undefined$RS" if !defined $END_ID and
				(defined $keywords{DELIB_ROM}{defined} or
				defined $keywords{ID_SECTION_END}{defined});
warn "APPL_CODE_START undefined$RS" if !defined $APPL_CODE_START and
				defined $keywords{APPL_CODE_START}{defined};
warn "HE_END_CAL undefined$RS" if !defined $HE_END_CAL and
				defined $keywords{HE_END_CAL}{defined};
warn "START_SAFETY_CODE undefined$RS" if !defined $START_SAFETY_CODE and
				defined $keywords{START_SAFETY_CODE}{defined};
warn "END_SAFETY_CODE undefined$RS" if !defined $END_SAFETY_CODE and
				defined $keywords{END_SAFETY_CODE}{defined};
warn "START_SAFETY_CAL undefined$RS" if !defined $START_SAFETY_CAL and
				defined $keywords{START_SAFETY_CAL}{defined};
warn "END_SAFETY_CAL undefined$RS" if !defined $END_SAFETY_CAL and
				defined $keywords{END_SAFETY_CAL}{defined};
warn "SW_VERSION_STRING_ADDRESS undefined$RS"
				if !defined $SW_VERSION_STRING_ADDRESS and
				defined $keywords{HE_SW_ECU}{defined};
if ((defined $START_ID) and (defined $END_ID))
{
	die("ID_SECTION_START greater then ID_SECTION_END$RS")
				if hex($START_ID)>hex($END_ID)
}
if ((defined $APPL_CODE_START) and (defined $HE_END_CAL))
{
	die("CKS_APPLICATION begin greater then its end$RS")
				if hex($APPL_CODE_START)>hex($HE_END_CAL)
}
if ((defined $START_SAFETY_CODE) and (defined $END_SAFETY_CODE))
{
	die("CKS_SAFETY begin greater then its end$RS")
				if hex($START_SAFETY_CODE)>hex($END_SAFETY_CODE)
}
if ((defined $START_SAFETY_CAL) and (defined $END_SAFETY_CAL))
{
	die("CKS_SAFETY_CAL begin greater then its end$RS")
				if hex($START_SAFETY_CAL)>hex($END_SAFETY_CAL)
}
#--- Update the PRODUCT_CONFIG file
unless (defined $MM_common::opt_output)	# Double chack to avoid wrong warning
{
	$INPLACE_EDIT = '' unless defined $MM_common::opt_output
}
while (<>)
{
	if ((m/^ID_SECTION_START:/) and (defined $START_ID))
	{
		unless (s/:\s*\w+/: 0x$START_ID/)
		{
			warn "ID_SECTION_START unrecognised$RS";
			$incomplete = ''
		}
	}
	if ((m/^ID_SECTION_END:/) and (defined $END_ID))
	{
		unless (s/:\s*\w+/: 0x$END_ID/)
		{
			warn "ID_SECTION_END unrecognised$RS";
			$incomplete = ''
		}
	}
	if (m/^CKS_APPLICATION:/)
	{
		if (defined $APPL_CODE_START)
		{
			unless (s/;\w+?,/;0x$APPL_CODE_START,/)
			{
				warn "'CKS_APPLICATION start' unrecognised$RS";
				$incomplete = ''
			}
		}
		if (defined $HE_END_CAL)
		{
			unless (s/,\w+/,0x$HE_END_CAL/)
			{
				warn "'CKS_APPLICATION end' unrecognised$RS";
				$incomplete = ''
			}
		}
	}
	if (m/^CKS_SAFETY:/)
	{
		if (defined $START_SAFETY_CODE)
		{
			unless (s/;\w*?,/;0x$START_SAFETY_CODE,/)
			{
				warn "'CKS_SAFETY start' unrecognised$RS";
				$incomplete = ''
			}
		}
		if (defined $END_SAFETY_CODE)
		{
			unless (s/,\w*/,0x$END_SAFETY_CODE/)
			{
				warn "'CKS_SAFETY end' unrecognised$RS";
				$incomplete = ''
			}
		}
	}
	if (m/^CKS_SAFETY_CAL:/)
	{
		if (defined $START_SAFETY_CAL)
		{
			unless (s/;\w*?,/;0x$START_SAFETY_CAL,/)
			{
				warn "'CKS_SAFETY_CAL start' unrecognised$RS";
				$incomplete = ''
			}
		}
		if (defined $END_SAFETY_CAL)
		{
			unless (s/,\w*/,0x$END_SAFETY_CAL/)
			{
				warn "'CKS_SAFETY_CAL end' unrecognised$RS";
				$incomplete = ''
			}
		}
	}
	if ((m/^SW_VERSION_STRING_ADDRESS:/) and
					(defined $SW_VERSION_STRING_ADDRESS))
	{
		unless (s/:\s*\w+/: 0x$SW_VERSION_STRING_ADDRESS/)
		{
			warn "SW_VERSION_STRING_ADDRESS unrecognised$RS";
			$incomplete = ''
		}
	}
	print
}
END
{
die ("incomplete <>$RS") if defined $incomplete
}

=head1 NAME

PRODUCT_CONFIG - update PRODUCT_CONFIG file

=head1 SYNOPSIS

PRODUCT_CONFIG [options] [PRODUCT_CONFIG file] (default is stdin)

=head1 DESCRIPTION

The following keywords are searched in the map file and their values
used to update the specified PRODUCT_CONFIG file as in the following table:

 DELIB_ROM start / ID_SECTION_START	-> ID_SECTION_START:
 DELIB_ROM end / ID_SECTION_END		-> ID_SECTION_END:
 APPL_CODE_START and HE_END_CAL		-> CKS_APPLICATION:
 START_SAFETY_CODE and END_SAFETY_CODE	-> CKS_SAFETY:
 START_SAFETY_CAL and END_SAFETY_CAL	-> CKS_SAFETY_CAL:
 HE_SW_ECU				-> SW_VERSION_STRING_ADDRESS:

DELIB_ROM and ID_SECTION_START/END are reciprocal.
 
-r option can be used to specify different names for each keyword.
Each line of the rename file must have a standard keyword followed by
changed name, space separated.

=head1 OPTIONS

 -c --compiler name	compiler name
 -m --map filename	map file
 -r --rename file	file with keywords rename (one rename per line)

=head1 AUTHOR

TechM

=head1 COPYRIGHT

(c) Copyright 2023 TechM.
